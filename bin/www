#!/usr/bin/env node
var debug = require('debug')('gazzetta');
var app = require('../app');
var config = require('../config.js');
var model = require('../models.js');
var us = require('underscore')._;
var redis = require('redis'),
    client = redis.createClient();

if (app.get('env') === 'production') {
//  app.set('host', config.production.host);
  app.set('port', config.production.port);
} else {
  app.set('host', config.dev.host);
  app.set('port', config.dev.port);
}

var server = app.listen(app.get('port'), app.get('host'), function() {
  debug('Express server listening on port ' + server.address().port);
});


var Player = model.Player;
var Group = model.Group;
var groupId, groupContent, playersMaster, ratingSumKeys, ratingNumKeys, momKeys, comments, summaryKey;

setLocalCache();

var io = require('socket.io')(server);

io.on('connection', function(socket) {

  emitBaseInfo(socket);

  socket.on('post rating', function(data) {
    updateRating(data);
  });

  socket.on('post mom', function(data) {
    updateMom(data);
    broadcastBaseInfo('mom');
  });

  socket.on('post summary', function(data) {
    insertSummaryComment(data);
    broadcastBaseInfo('summary');
  });

  socket.on('set local cache', function(data) {
    setLocalCache();
  });
});

setInterval(function() { broadcastBaseInfo('rating'); }, 5000);

function initLocalCache() {
  groupId = 3;
  groupContent = 'ジャマイカ戦を1点〜10点で採点しよう!';
  playersMaster = [];
  ratingSumKeys = [];
  ratingNumKeys = [];
  momKeys = [];
  comments = {};
  summaryKey = "summary:" + groupId;
}

function setLocalCache() {
  initLocalCache();
  Group.findOne({id:1}, function(err, currentGroup) {
    if (currentGroup) {
      groupId = currentGroup.currentValidId;
      groupContent = currentGroup.content;
    }
    Player.find({ group: groupId, valid: true }).sort('id').exec(function(err, players) {
      playersMaster = players;
      us.each(players, function(item) {
        ratingSumKeys.push('ratingSum:' + groupId + ':' + item.id);
        ratingNumKeys.push('ratingNum:' + groupId + ':' + item.id);
        momKeys.push('mom:' + groupId + ':' + item.id);
        client.lrange('comment:' + groupId + ':' + item.id, 0, 2 ,function(err, val) {
          comments[item.id] = val;
        });
      });
    });
  });
}

function emitBaseInfo(socket) {
  client.multi([
    ["mget"].concat(ratingSumKeys),
    ["mget"].concat(ratingNumKeys),
    ["mget"].concat(momKeys),
    ["lrange", summaryKey, 0, 2]
  ]).exec(function (err, replies) {
    if (replies && (replies.length > 3)) {
      socket.emit('login', { type: 'all', players: playersMaster, ratings: { sum: replies[0], num: replies[1] }, opinions: comments, summaries: replies[3], moms: replies[2], group: groupId, groupContent: groupContent });
    } else {
      socket.emit('login', { type: 'all', players: playersMaster, ratings: { sum: [], num: [] }, opinions: comments, summaries: [], moms: [], group: groupId, groupContent: groupContent });
    }
  });
}

function broadcastBaseInfo(type) {
  client.multi([
    ["mget"].concat(ratingSumKeys),
    ["mget"].concat(ratingNumKeys),
    ["mget"].concat(momKeys),
    ["lrange", summaryKey, 0, 2]
  ]).exec(function (err, replies) {
    if (replies && (replies.length > 3)) {
      io.sockets.emit('broadcast results', { type: type, players: playersMaster, ratings: { sum: replies[0], num: replies[1] }, opinions: comments, summaries: replies[3], moms: replies[2], group: groupId, groupContent: groupContent  });
    } else {
      io.sockets.emit('broadcast results', { type: type, players: playersMaster, ratings: { sum: [], num: [] }, opinions: comments, summaries: [], moms: [], group: groupId, groupContent: groupContent  });
    }
  });
}

function updateRating(data) {
  var id = data.id;
  var gid = data.group;
  var formatedRating = parseFloat(data.rating);
  var opinion = data.opinion;
  var ratingNumKey = 'ratingNum:' + gid + ':' + id;
  var ratingSumKey = 'ratingSum:' + gid + ':' + id;

  if (!ratingValidation(formatedRating)) {
    return;
  }
  client.get(ratingSumKey, function(err, val) {
    if (formatedRating > 0) {
      if (val) {
        client.set(ratingSumKey, parseFloat(val) + formatedRating);
      }
      else {
        client.set(ratingSumKey, formatedRating);
      }
      client.incr(ratingNumKey);
    }
  });

  if (opinion.length > 0) {
    var commentKey = "comment:" + gid + ':' + id;
    var escapedComment = htmlEscape(opinion);
    if (formatedRating > 0) {
      client.lpush(commentKey, escapedComment + ' [' + formatedRating + '点]');
    } else {
      client.lpush(commentKey, escapedComment + ' [評価なし]');
    }
    client.lrange(commentKey, 0, 2 ,function(err, val) {
      comments[id] = val;
    });
  }
}

function ratingValidation(formatedRating) {
  if (formatedRating >= 0 && formatedRating <= 10) {
    return true;
  }
  return false;
}

function insertSummaryComment(data) {
  var comment = data.comment;
  var gid = data.group;
  if (comment.length > 0) {
    client.lpush(summaryKey, htmlEscape(comment));
  }
}
function htmlEscape(text) {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}

function updateMom(data) {
  var id = data.id;
  var gid = data.group;
  var momKey = 'mom:' + gid + ':' + id;
  client.incr(momKey);
}

function getUnixTime() {
  return parseInt((new Date)/1000);
}

