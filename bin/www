#!/usr/bin/env node
var debug = require('debug')('gazzetta');
var app = require('../app');
var config = require('../config.js');
var model = require('../models.js');
var us = require('underscore')._;
var redis = require('redis'),
    client = redis.createClient();

if (app.get('env') === 'production') {
//  app.set('host', config.production.host);
  app.set('port', config.production.port);
} else {
  app.set('host', config.dev.host);
  app.set('port', config.dev.port);
}

var server = app.listen(app.get('port'), app.get('host'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var Player = model.Player;
var Summary = model.Summary;
var Mom = model.Mom;

var groupId = 1;
var playersMaster;
var ratingSumKeys = [];
var ratingNumKeys = [];
var momKeys = [];
var commentKeys = [];
var comments = {};
Player.find({ group: groupId }).sort('id').exec(function(err, players) {
  playersMaster = players;
  us.each(players, function(item) {
    ratingSumKeys.push('ratingSum:' + groupId + ':' + item.id);
    ratingNumKeys.push('ratingNum:' + groupId + ':' + item.id);
    momKeys.push('mom:' + groupId + ':' + item.id);
    client.lrange('comment:' + groupId + ':' + item.id, 0, 2 ,function(err, val) {
      comments[item.id] = val;
    });
  });
});

var io = require('socket.io')(server);

io.on('connection', function(socket) {

  emitBaseInfo(socket);

  socket.on('post rating', function(data) {
    updateRating(data);
    broadcastBaseInfo();
  });

  socket.on('post mom', function(data) {
    updateMom(data);
    broadcastBaseInfo();
  });

  socket.on('post summary', function(data) {
    insertSummaryComment(data);
    broadcastBaseInfo();
  });

});

function emitBaseInfo(socket) {
  client.multi([
    ["mget"].concat(ratingSumKeys),
    ["mget"].concat(ratingNumKeys),
    ["mget"].concat(momKeys)
  ]).exec(function (err, replies) {
    Summary.find({ group: groupId }).exec(function(err, summaries) {
      socket.emit('login', { players: playersMaster, ratings: { sum: replies[0], num: replies[1] }, opinions: comments, summaries: summaries, moms: replies[2], group: groupId });
    });
  });
}

function broadcastBaseInfo() {
  client.multi([
    ["mget"].concat(ratingSumKeys),
    ["mget"].concat(ratingNumKeys),
    ["mget"].concat(momKeys)
  ]).exec(function (err, replies) {
    Summary.find({ group: groupId }).sort('-createdAt').exec(function(err, summaries) {
      io.sockets.emit('broadcast results', { players: playersMaster, ratings: { sum: replies[0], num: replies[1] }, opinions: comments, summaries: summaries, moms: replies[2], group: groupId });
    });
  });
}

function updateRating(data) {
  var id = data.id;
  var gid = data.group;
  var formatedRating = parseFloat(data.rating);
  var opinion = data.opinion;
  var ratingNumKey = 'ratingNum:' + gid + ':' + id;
  var ratingSumKey = 'ratingSum:' + gid + ':' + id;

  client.get(ratingSumKey, function(err, val) {
    if (val) {
      client.set(ratingSumKey, parseFloat(val) + formatedRating);
    }
    else {
      client.set(ratingSumKey, formatedRating);
    }
    client.incr(ratingNumKey);
  });

  if (opinion.length > 0) {
    var commentKey = "comment:" + gid + ':' + id;
    client.lpush(commentKey, opinion);
    client.lrange(commentKey, 0, 2 ,function(err, val) {
      comments[id] = val;
    });
  }
}

function insertSummaryComment(data) {
  var comment = data.comment;
  var group = data.group;
  if (comment.length > 0) {
    var newSummary = new Summary({ group: group, comment: comment, createdAt: getUnixTime() });
    newSummary.save(function(err) {

    });
  }
}

function updateMom(data) {
  var id = data.id;
  var gid = data.group;
  var momKey = 'mom:' + gid + ':' + id;
  client.incr(momKey);
}

function getUnixTime() {
   return parseInt((new Date)/1000);
}

